buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
  }
}

plugins {
    // Apply the scala plugin to add support for Scala
    id 'com.google.protobuf' version '0.8.8'
    id 'scala'
}

ext {
    scalapbVersion = '0.11.3'
}

repositories {
    jcenter()
}

dependencies {
    // Use Scala 2.12 in our library project
    implementation 'org.scala-lang:scala3-compiler_3:3.0.0'

    // Use Scalatest for testing our library
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_3:3.2.9'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_3:2.0.0'
    compile "com.thesamet.scalapb:scalapb-runtime_3:${scalapbVersion}"
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.7.1'
  }
  plugins {
    scalapb {
        artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
            "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:windows@bat" :
            "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:unix@sh"
    }
  }

  generateProtoTasks {
    all().each { task ->
      task.builtins {
          remove java
      }
      task.plugins {
          scalapb {
            // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
            // option 'flat_package'
          }
      }
    }
  }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'scalapb.demo.Demo'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

// Add geneated Scala code as a source directory
sourceSets {
  main {
    scala {
        srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
    }
  }
}
